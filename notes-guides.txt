MVC 

Controller (Logic)

Model(data)

View template(JSP, Groovy etc)

1. web.xml - dispatcher servlet (Front controller), servlet mapping, location for the spring config file.

2. spring config file.xml - component scanning, supporting functions, MVC view resolver(prefix, suffix for getting view files)

-----Adding static files-----

resources folder in WebContent
Step 1: Add the following entry to your Spring MVC configuration file: spring-mvc-demo-servlet.xml

You can place this entry anywhere in your Spring MVC config file.

<mvc:resources mapping="/resources/**" location="/resources/"></mvc:resources> 

Step 2: Now in your view pages, you can access the static files using this syntax:

<img src="${pageContext.request.contextPath}/resources/images/spring-logo.png"> 

You need to use the JSP expression ${pageContext.request.contextPath} to access the correct root directory for your web application.

Apply the same technique for reading CSS and JavaScript.

-----Generate & Deploy War file-----

1. In Eclipse, stop Tomcat

2. Right-click your project and select Export > WAR File

3. In the Destination field, enter: <any-directory>/mycoolapp.war

4. Outside of Eclipse, start Tomcat
- If you are using MS Windows, then you should find it on the Start menu

5. Make sure Tomcat is up and running by visiting: http://localhost:8080

6. Deploy your new WAR file by copying it to <tomcat-install-directory>\webapps

Give it about 10-15 seconds to make the deployment. You'll know the deployment is over because you'll see a new folder created in webapps ... with your WAR file name.

7. Visit your new app. If your war file was: mycoolapp.war then you can access it with:  http://localhost:8080/mycoolapp/


Spring MVC form tags
<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %>

jstl tags
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>

-----validator-----
www.hibernate.org

validator -> releases -> 6.2 -> download zip archive

Extract go to dist folder
Copy all jars in dist outer folder.
ALso copy jars in the required folder inside dist/lib folder.
Copy all these to WEB-INF/lib 

-----validator-Empty-String-----
@InitBinder - Preprocess

StringTrimmerEditor(true) true means it with strim it to null

WebDataBinder object can register as customer editor the StringTrimmerEditor object for the String class.

-----Regular expression-----
https://docs.oracle.com/javase/tutorial/essential/regex


-----custom error properties file-----
We basically need to override the default Spring MVC validation messages.

errortype.springmodelattributename.fieldname=errormessage

The format of the error key is:   code + "." + object name + "." + field

To find out the given error code, in your Spring controller, you can log the details of the binding result

System.out.println("Binding result: " + theBindingResult); 

Also edit the spring config file to load custom message resources.

-----Custom Anotation spring mvc-----
annotation over it 
@Constraint
@Target - on methods/fields etc
@Retention - runtime etc

#------------
HIBERNATE
#------------

Download MySQL
http://dev.mysql.com/downloads
Select MySQL Community Server & Download MSI

Install
Developer default

To add Hibernate to Eclipse
1. Create Eclipse Project
2. Download Hibernate Files
download link:
http://www.luv2code.com/download-hibernate
3. Download MySQL JDBC Driver
download link:
http://dev.mysql.com/downloads 
and select connector/J 
and select Platform Independent
and download zip file
4. Add JAR files to Eclipse Project ... Build Path 

JDBC url
jdbc:mysql://localhost:3306/hb_student_tracker?useSSL=false&serverTimezone=UTC

Entity Class
Java class that is mapped to a database table.

Java annotation
1. Map class to database table.
1. Map fields to database columns. 

Session factory is once created and session short-lived.

If while creating session factory object, in .configure() no file name specified, by default it will be "hibernate.cfg.xml".

@Id annotation for primary key 

#the values will start from 3000 onwards
ALTER TABLE hb_student_tracker.student AUTO_INCREAMENT=3000;

#deletes all rows and resets sequence to one
truncate hb_student_tracker.student

###To show SQL queries values
(2 methods - manual and maven)

1. Download logback JAR files manually
- logback-core-1.2.7.jar
- logback-classic-1.2.7.jar
- slf4j-api-1.7.32.jar

1b. Copy these files to your project’s lib directory
1c. Right-click your Eclipse project and select Properties
1d. Select Build Path > Libraries > Add JARS…
1e. Select the JAR files from the lib directory

Option 2: Maven dependencies (only required if using Maven)
Add the following dependency to your Maven pom.xml file.
<dependency>
    <groupId>ch.qos.logback</groupId>
    <artifactId>logback-classic</artifactId>
    <version>1.2.7</version>
</dependency>

2. Create a Logback configuration file
Notes regarding file location:
- If you are using manual JAR files place this file at src/logback.xml
- If you are using Maven, place this file at src/main/resources/logback.xml
Please make note of the following entry:

    <logger name="com.luv2code.hibernate.demo" level="TRACE"/>
Be sure the package name matches the name of your package.
This Logback configuration file allows you to see a low-level trace of Hibernate and this allows you see the real SQL parameter values.

3. Run the CreateStudentDemo application
Now run your application. You will see a lot of low-level TRACE logs in the Eclipse Console window.


For updating an object property, we use setter method of that object and commit transaction.  

#Adding Date
1. Alter database table for student
We need to alter the database table to add a new column for "date_of_birth".
Run the following SQL in your MySQL Workbench tool.
ALTER TABLE `hb_student_tracker`.`student` 
ADD COLUMN `date_of_birth` DATETIME NULL AFTER `last_name`;

2. Add a date utils class for parsing and formatting dates
We need to add a DateUtils class to handle parsing and formatting dates. The source code is here. The class should be placed in the package: com.luv2code.hibernate.demo.

3. Add date field to Student class
We need to add a date field to the Student class. We map this field to the database column, "date_of_birth". Also, we make use of the @Temporal annotation. This is a Java annotation for storing dates.
    @Column(name="date_of_birth")
    @Temporal(TemporalType.DATE)    
    private Date dateOfBirth;

4. Add toString method to Student class
We will make an update to the toString method in our Student class.  It will use the formatter from our DateUtils.class. This code is already included in Student.java from the previous step.

5. Update CreateStudentDemo

Primary key - unique id
Foreign key - a column which is primary key in another table
Cascade delete - if an employee is deleted from a table then their employee details will be deleted from another table also.
Eager loading - fetches everything 
Lazy loading - fetches only required

@OneToOne
Cascade Type - PERSIST, REMOVE, REFRESH, DETACH, MERGE, ALL

For bidirectional
@OneToOne(mappedBy="instructorDetail", cascade=CascadeType.ALL)

Prefer Lazy Loading over Eager Loading.

Default Fetch Types
@OneToOne - FetchType.EAGER
@OneToMany - FetchType.LAZY
@ManyToOne - FetchType.EAGER
@ManyToMany - FetchType.LAZY


----------
web-customer-tracker project
----------
DAO - DATA ACCESS OBJECT
Helper/utility class to access database

ENTITY CLASS - Java class that is mapped to a database table 

While importing entity, id, column & table use javax.persistence class

sessionfactory need a dataSource defined earlier.

Customer DAO
1. Define DAO interface
2. Define DAO implementation
	Inject the session factory

@Transactional
Automagically begin and end transaction for your Hibernate code.

SessionFactory imports from Hibernate package
Autowired imports from Spring package 

@Repository
Applies for DAO Implementations
Spring will automatically register the DAO implementations.
Spring also provides translation of any JDBC related exceptions.

List Customers
1. Create Customer.java
2. Create CustomerDAO.java
	1. and CustomerDAOImpl.java
3. Craete CustomerController.java
4. Create JSP page: list-customers.jsp

JSTL tag library for JSPs
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>

${customers} in jsp is our attribute name from our Spring mvc model.

Dev Process for CSS
1. Place CSS in a 'resources' directory
(resources directory can be any name but need to be configured in spring)
2. Configure Spring to serve up 'resources' directory
<mvc:resources location="/resources/" mapping="/resources/**"></mvc:resources> 
(url mapping, ** to recurse subdirectories)
3. Reference CSS in your JSP
<link type="text/css" rel="stylesheet" href="${pageContext.request.contextPath}/resources/css/style.css" />

Note: This applies for JavaScript, images, pdfs etc...
(If want to create alternate directory structure, need add multiple entries in Spring config file like for resources above.) 

Welcome file
1. Server will look for a welcome file
2. If it doesn't find one, then you'll get 404
3. Welcome files are configured in web.xml
inside <welcome-file-list> it will load in top down fashion

To redirect request to a different page in jsp
<% response.sendRedirect("customer/list"); %>

Here the welcome file containing the redirect request was placed in the WebContent folder.

-----
Added in Spring 4.3x
only for GET
@GetMapping("/processForm") is shortcut for @RequestMapping(path="/processForm", method=RequestMethod.GET) 

only for POST
@PostMapping("/processForm") is shortcut for @RequestMapping(path="/processForm", method=RequestMethod.POST) 

GET
Good for debugging
Bookmark or email URL
Limitations on data length

POST
Can't Bookmark or email URL
No limitations on data length
Can also send binary data

-----
Service Layer
- Service Facade design pattern
- Intermediate layer for custom business logic
- Integrate data from multiple sources (DAO/repositories)
Customer Controller<->Customer Service<->Customer DAO<->DB

e.x.
				      <->Customer DAO
Customer Controller<->Customer Service<->Sales DAO
				      <->License DAO

	@Component
	    |
-------------------------
|	    |		|
@Controller @Repository @Service



@Service
Applied to Service implementations
It will automatically register the Service implementation thanks to companent-scanning

Customer Service
1. Define Service interface
2. Define Service implementation
	a) Inject the CustomerDAO

@Transactional now defined at Service layer

-----
<input type="button" value="Add Customer" onclick="window.location.href='showFormForAdd'; return false;"/>
onclick here calls our spring controller mapping

Add support for Spring MVC Form Tags for Jsp
<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %>

For redirection in Controller
return "redirect:/customer/list";

-----
Update Customer
1. Update list-customer.jsp
a) New "Update" link
2. Create customer-form.jsp
a) Prepopulate the form
3. Process form data
a) Controller > Service > DAO

For the model customer in jsp
During Form load: Call getters
During Form submit: Call setters

For update, we need to associate this data with customer id
<form:hidden path="id"/>
 above line should be added in the jsp where submitting to update the correct object in database 

save(...) INSERT new record
update(...) UPDATE existing record
saveOrUpdate(...) 
if (primaryKey/id) empty
then INSERT new customer
else UPDATE existing customer

-----
Delete Customer
1. Add "Delete" link on JSP
2. Add code for "Delete"
a) Controller > Service > DAO

-----
Search
Overview of Development Process
1. Create the HTML form
2. Add mapping to the controller
3. Add methods in the service layer to delegate to DAO
4. Add method in the DAO to perfom search

-----
Sorting columns
Overview of Development Process
1. Create a Utility class for sort constants
2. In JSP page, add sort links for column headers
3. Update controller to read sort field
4. Update method in the service layer to delegate to DAO
5. Update method in the DAO to get customers sorted by given field

----------
End of web-customer-tracker project
----------
-----
AOP
2 main Problem
Code tangling (logging, security tangled in)
Code scattering (updating all classes)

AOP
Cross-Cutting Concerns
Concerns means logic/functionality

Aspects
Aspect can be reused at multiple locations
Same aspect/class ... applied based on configuration

Benefits
- Code for Aspect is defined in a single class
- Business code in your application is cleaner
- Configurable

Usecases
Logging, security, transactions, Audit logging, Exception Handling, API Management

Advantages
1. Reusable modules
2. Resolve code tangling
3. Resolve code scatter
4. Applied selectively
5. Applied selectively based on configuration

Disadvantages
1. Too many aspects and app flow is hard to follow
2. Minor performance cost for aspect execution(run-time weaving)

Terminology
Aspect: module of code for a cross-cutting concern(logging, security, ...)
Advice: What action is taken and when it should be applied
Join Point: When to apply code during program execution
Pointcut: A predicate expression for where advice should be applied

Advice Types
Before advice: run before the method
After finally advice: run after the method (finally)
After returning advice: run after the method (success execution)
After throwing advice: run after method (if exception thrown)
Around advice: run before and after method

Weaving 
Connecting aspects to target objects to create an advised object
Different types of weaving 
	Compile-time, load-time or run-time
Regarding performance: run-time weaving is the slowest

2 leading AOP Frameworks for Java
Spring AOP AspectJ 

Spring AOP uses run-time weaving of aspects

AspectJ 
Provides complete support for AOP
Rich support for
	join points: method-level, constructor, field
	code weaving: compile-time, post compile-time and load-time

Spring AOP
Advantages
1. Simpler to use than AspectJ
2. Uses Proxy Pattern
3. Can migrate to AspectJ when using @Aspect Annotation

Disadvantages
1. Only supports method-level join points
2. Can only apply aspects to benas created by SPring app context
3. Minor performance cost for aspect execution (run-time weaving)

AspectJ
Advantages 
1. Supports all join points
2. Works with any POJO, not just beans from app context
3. Faster performance compared to Spring AOP
4. Complete AOP support

Disadvantages
1. Compile-time weaving requires extra compilation step
2. AspectJ pointcut syntax can become complex

Resources
Spring AOP Manual:www.spring.io
Book - AspectJ in Action by Raminvas Laddad
Aspect-Oreiented Development with Use Cases by Ivar Jacobson and Pan-Wei Ng

Roadmap
Create Aspects
Develop Advices
	Before, After returning, After throwing, 
	After finally, Around
Create Pointcut expressions
Apply it to our big CRM project (Spring MVC + Hibernate) 

Main App <-> AOP Proxy <- Logging Aspect, Security Aspect -> Target Object 

Adding AspectJ JAR file

Development Process - @Before
1. Create target object: AccountDAO
2. Create Spring Java Config class
3. Create main app
4. Create an Aspect with @Before advice

Best Practices: Aspect and Advices
1. Keep the code small
2. Keep the code fast
3. Do not perform any expensive / slow operations
4. Get in and out as QUICKLY as possible

-----
Pointcut: A predicate expression for where advice should be applied

execution(modifiers-pattern? return-type-pattern declaring-type-pattern? method-name-pattern(param-pattern) throws-pattern?)
The pattern is optional if it has "?"

@Before("execution(public void add*())") Match methods starting with add in any class.

@Before("execution(* processCreditCard*())") Modifier is optional...so you don't have to list it 

To get fully qualified class name -> go to class select the class name and right click and copy qualified name

For param-pattern
()-matches a method with no arguments
(*)-matches a method with one argument of any type
(..)-matches a method with 0 or more arguments of any type

@Before("execution(* addAccount(com.luv2code.aopdemo.Account))")
Match addAccount methods that have Account param

@Before("execution(* addAccount(..))")
Match addAccount methods with any number of arguments

@Before("execution(* com.luv2code.aopdemo.dao.*.*(..)")
Match any method in our DAO package: com.luv2code.aopdemo.dao

-----

Step1 - Create Pointcut Declaration

@Pointcut("execution(* com.luv2code.aopdemo.dao.*.*(..)")
private void forDaoPackage(){}

forDaoPackage name of pointcut declaration, can have any name

Step2 - Apply to multiple advices 

@Before("forDaoPackage()")
public void performApiAnalytics(){
}

-----
Combining Pointcut Expressions using logic operators
AND (&&)
OR (||)
NOT (!)

Step1 - Create Pointcut Declarations
Step2 - Combine Pointcut Declarations
Step3 - Apply Pointcut Declaration to advice

-----
1. Refractore: Place advices in separate Aspects
2. Add @Order annotation to Aspects

Lower numbers have higher precedence

Give fully qualified name in the pointcut.
-----
1. Access and display Method Signature
o/p void com.luv2code.aopdemo.AccountDAO.addAccount(Account,boolean)

2. Access and display Method Arguments

JoinPoint has metadata about method call

-----
@AfterReturning(pointcut="execution(* com.luv2code.aopdemo.dao.AccountDAO.findAccounts(..))",
		returning="result"
		)

AfterReturning used for Post Processing data also, modified data shows up.

-----
@After kind of like finally.
-----
@Around - Instrumentation/profiling code
How long does it take for a section of code to run

ProceedingJoinPoint is handle to target method

theProceedingJoinPoint.proceed()
theProceedingJoinPoint - handle to target method
proceed() - Execute the target method
-----
Resolving Print Order Issue
The data is printing to two different output streams
	Spring is printing to the logger output stream.
	System.out.println is printing to the standard out output stream. 

private static Logger myLogger = Logger.getLogger(AroundWithLoggerDemoApp.class.getName());

getLogger(name) - the name is mostly used is class name.

myLogger.info("to print")

-----
When using copy Project
change the context
right click-> properties -> Web Project Settings
change to project name if renamed the project to change the url while running.

Add namespace of aop similar to mvc above in line 7 in spring config file.
Also add schema location as below in config file 
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop.xsd

Add aspectj proxy setting so spring can process @Aspect classes
----------
Maven Reference Manual
www.luv2code.com/mavenreferencemanual

maven - project management tool
popular use - build management and dependencies

like a personal shopper

How it work?
1. Read config file
2. Check local repo
3. Get from remote repo
4. Save in local repo
5. Build and Run

Maven will handle class/build path

Standard Directory structure
src/main/java - Your Java source code
src/main/resources - Properties/config files used by your app
src/main/webapp - JSP files and web config files other web asssets(images, css, js, etc)
src/test - Unit testing code and properties
target - Destination directory for compiled code. Automatically created by Maven

Working on web project place code in- src/main/webapp

POM file - project object model file
	project meta data
	dependencies
	plug-ins

Project Coordinates -Elements
Group Id - Name of company, group, or organization. Convention is to use reverse domain name: com.luv2code
Artifact Id - Name of this project: mycoolapp
Version: A specific release version like:1.0 etc. If project is under active development then: 1.0-SNAPSHOT

GAV
Version is needed for devops

maven central repository: search.maven.org
alternative: mvnrepository.com

Maven archetype = starter project
maven-archetype-quickstart : sample Maven project
maven-archetype-webapp : sample Maven Webapp project

eclipse plugins
m2e - Maven Integration for eclipse
m2e-wtp - Maven Integration for WTP (web tools)
-----
To change compiler setting 
Inside pom inside properties 

<maven.compiler.target>1.8</maven.compiler.target> // Generates class files that will work on a given Java version
<maven.compiler.source>1.8</maven.compiler.source> // The Java version of source code accepted

Update the project
right click on project - Maven - Update the project
tick update, refresh, clean checkbox
-----

Local repository (your local cahe)
Windows: c:\Users\<users-home-dir>\.m2\repository
Mac and Linux: ~/.m2/repository

https://repo.maven.apache.org/maven2/

Maven repository manager products
Archiva - Apache
Artifactory - JFrog
Nexus - Sonatype

cloud hosted solution - www.packagecloud.io, www.mymavenrepo.com
Google search: "maven cloud hosts"

-----
Spring Security
-----

Authentication
Check user id and password with credentials stored in app/db

Authorization
Check to see if user has an authorized role

Http basic authentication
Spring security default login form
Custom Login Form

Step1: Add Maven dependencies for Spring MVC WebApp
spring-webmvc, javax.servlet-api, jstl, javax.servlet.jsp-api 

Customize Maven Build
Enable the MVC Java Config
	@EnableWebMvc - 
	similar to annotaion driven, 
	adds conversion, formatting, validation, 
	Processing of @Controller, @RequestMapping etc

Step2: Create Spring App Configuration(@Configuration)

Step3: Create Spring Dispatcher Servlet Initializer
Web App Initializer - AbstractAnnotationConfigDispatcherServletInitializer (Add this super class & make file changes)

Step4: Develop our Spring Controller 
Step5: Develop our JSP view page
create view folder under bottom src/main/webapp/WEB-INF/

Spring Security & Spring Framework compactibility
Get the spring security and check the dependent pom there the spring framework version will be mentioned

Add below Spring security dependencies in POM
spring-security-web
spring-security-config

-----
Spring Security Basic Security
1. Create Spring Security Initializer
AbstractSecurityWebApplicationInitializer - Special class to register the Spring Security Filters

2. Create Spring Security Configuration(@Configuration)
WebSecurityConfigurerAdapter
override/implement configure(AuthenticationManagerBuilder)

3. Add users, passwords and roles

-----
Context Root  like name of application
The root path for your web application
properties -> Web Project Settings -> Context Root

-----
Custom Login form
1. Modify Spring Security Configuration to reference custom login form
override configure(HttpSecurity) - Configure security of web paths in application, login, logout etc

2. Develop a Controller to show the custom login form
3. Create custom login form
	HTML(CSS optional)
	Spring MVC form tag <form:form>6
	default names
		name="username"
		password="password"

context root(eclipse) and context path(jsp) means same thing.

.authorizeRequests() - Restrict access based on the HttpServletRequest
.anyRequest().authenticated() - Any request to the app must be authenticated(ie logged in)
.formLogin() - We are customizing the form login process
.loginPage("/showMyLoginPage") - Show our custom form at the request mapping "/showMyLoginPage"
.loginProcessingUrl("/authenticateTheUser") - Login form should POST data to this URL for processing (check user id and password)
.permitAll() - Allow everyone to see login page. No need to be logged in.

name of username, password must be username, password.

On login failure
Spring security will send user back to your login page
Append an error parameter: ?error

Development Process
1. Modify custom login form
	a. Check the error parameter
	b. If error parameter exists, show an error message

-----
Logout process
/logout - default
Append a logout parameter ?logout

Add logout support in Spring Security Context
Add logout support in jsp
Add the logout message in login form after checking the logout parameter

-----
CSRF (Cross-Site Request Forgery)
Enabled by default in Spring Security
It uses Synchronizer Token Pattern. Each request includes a session cookie and randomly generated token.
For request processing, Spring Security verifies token before processing.  
All this is handled by SPring Security Filters

When to use
For any normal browser web requests

To use
use Post instead of GET
Include CSRF token in form submission
<form:form> automatically adds CSRF token
If you don't use <form:form>, you must manually add CSRF tokenx

What happens if you don't include CSRF token? 403 Forbidden error

-----
<input type="hidden" name="_csrf" value="1399955a-e3a2-43a0-a410-64b482071b82" />
Here this is token gets added automagically by spring mvc form:form tag.
It will pass this token along with session cookie, and spring mvc will compare if this works for this given user session before they actually authorize the request.

Forbidden, The server understood the request but refuses to authorize is shown if only form is used. 
-----
Displaying User Id and roles
1. Update POM file for Spring Security JSP Tag Library.
	dependecy-spring-security-taglibs
2. Add Spring Security JSP Tag Library to JSP page.
<%@ taglib prefix="security" uri="http://www.springframework.org/security/tags" %>
3. Display User ID.
principal.username
4. Display User Roles.
principal.authorities
authorities=userroles
-----
Restrict Access
1. Create Supporting Controller code and View Pages.
2. Update Our User Roles.
3. Restricting Access to Roles
antMatchers(<<add path to match on >>).hasRole(<< authorized role >>)
antMatchers(<<add path to match on >>).hasAnyRole(<< authorized role >>) 
(Any role in the list, comma-delimited list)

------
Custom Access denied page
1. Configure custom page for access denied.
	.exceptionHandling()
		.accessDeniedPage("/access-denied");
2. Create supporting controller code and view page.
-----
Display content based on role
jsp
<security:authorize access="hasRole('MANAGER')">
</security:authorize>
-----
Spring Security JDBC
It has predefined table schemas

Dev process
1. Develop SQL Script to set up database
table - users, authorities
passwords are stored in a specific format {id}encodedPasword
noop (no operation)- plain text passwords
bcrypt - Bcrypt password hashing
2. Add database support to Maven POM file
mysql-connector-java, c3p0 (DB Connection Pool)
3. Create JDBC properties file
4. Define DataSource in Spring Configuration 
src/main/resources is a standard Maven directory (files are automatically copied to classpath during Maven build)
@PropertySource("classpath:persistence-mysql.properties")
Environment is a special helper class which will hold data read from properties files.	
5. Update Spring Security Configuration to use JDBC
auth.jdbcAuthentication().dataSource(securityDataSource);
Tells Spring Security to use JDBC authentication with our data source.

-----
bcrypt
Performs one-way encrypted hashing
Adds a random salt to the password for additional protection
Includes support to defeat brute force attacks

How to generate bcrypt password - website/java coding
visit https://www.bcryptcalculator.com/
enter plaintext password website will generate a bycrypt password for you
(multiple runs will generate a different password due to random password salting)

Password column must be atleast 68 chars wide
{bcrypt} - 8char
encodedPassword - 60 chars

Dev process
1. Run SQL Script that contain encrypted passwords
	A. Modify DDL for password field, length should be 68
2. Modify database properties file to point to new database schema

------
Spring Rest
REST: Representational State Transfer
Lightweight approach for communicating between applications.
dataformat XML and JSON(popular)
REST calls can be made over HTTP
REST is language independent.

free webservice: openweathermap.org

other REST APIs
www.programmableweb.com

JSON values
Numbers: no quotes
String: in doubles quotes
Boolean: true, false
Nested JSON object
Array
null
-----
-----
Jackson project
Development Process
1. Download and import Maven starter files.
www.luv2code.com/jackson-databinding-json-demo
2. Add Maven dependency for Jackson project.
jackson-databind
3. Create Student POJO Java class.
4. Create main Driver App.

If a new json contains extra properties, we can enable to ignore unknown properties.
@JsonIgnoreProperties(ignoreUnknown=true)

-----
REST over HTTP
Leverage HTTP methods for CRUD operations
POST - Create a new entity
GET - Read a list of entities or single entity
PUT - Update an existing entity
DELETE - Delete an existing entity

HTTP Request message
Request line: the HTTP command
Header variables: request metadata
Message body: contents of message

HTTP Response Message
Response line: server protocol and status code
Header variables: response metadata
Message body: contents of message

HTTP Response Status Codes
Code Range || Description
100-199 - Informational
200-299 - Successful
300-399 - Redirection
400-499 - Client error
500-599 - Server error

MIME Content Type
Multopurpose Internet Mail-Extension
Basic Syntax: type/sub-type
Examples: text/html, text/plain, application/json, application/xml

Client Tool
Send HTTP requests to REST Web Service/API

Plenty of tools available: curl(command line), Postman(GUI) etc

www.jsontest.com

jsonplaceholder.typicode.com (complex response)

-----
Creating a Spring RestController
1. Add Maven dependency for Spring MVC and Jackson project.
2. Add code for All Java Config:@Configuration
3. Add code for All Java Config: Servlet Initializer
Add super class AbstractAnnotationConfigDispatcherServletInitializer
in getServletConfigClasses return new Class[] {DemoAppConfig.class}
in getServletMappings return new String[] { "/" }
4. Create Spring REST Service using @RestController 

www.luv2code.com/spring-rest-demo

if error 
javax.servlet.jsp cannot be resolved to a type	index.jsp JSP Problem

Add JSP support in POM.xml

Spring Jackson support
JSON data being passed to REST controller is converted to Java POJO
Java POJO being returned from REST controller is converted to JSON
Happens automatically

-----
Retrieve POJOs as JSON
Dev Process
1. Create Java POJO class for Student
2. Create Spring REST Service using @RestController

Add ? mark in endpoint if not getting latest data due to caching.

-----
Using @PathVariable for REST endpoints
1. Add request mapping to Spring REST Service
	Bind path variable to method parameter using @PathVariable

@PostConstruct - load the student data only once
-----
Exception Handling
1. Create a custom error response class
2. Create a custom exception class
3. Update REST service to throw exception if student not found
4. Add an exception handler method using @ExceptionHandler

ResponseEntity<>(body, status)
-----
Adding generic exception handling
-----
Global exception handlers
We need global exception handlers
1. Promotes reuse
2. Centralizes exception handling

@ControllerAdvice
Similar to an interceptor/ filter
Pre-process requests to controllers
Post-process responses to handle exceptions
Perfect for global exception handling

Dev Process
1. Create new @ControllerAdvice
2. Refractor REST service ... remove exception handling code
3. Add exception handling code to @ControllerAdvice

-----
REST API Design
1. Review API requirements
2. Identify main resource / entity
convention is to use plural form of resource
3. Use HTTP methods to assign action on resource

Anti-Patterns
Don't include actions in the endpoints, instead use HTTP methods to assign actions

POST /api/customers 			Create a new customer
GET /api/customers 			Read a list of customers
GET /api/customers/{customerId} 	Read a single customer
PUT /api/customers 			Update an existing customer
DELETE /api/customers/{customerId} 	Delete an existing customer

-----
REST CRUD Database Realtime Project
Dev Process
1. Get customers
2. Get single customers
3. Add a new customer
4. Update an existing customer
5. Delete an existing customer
www.luv2code.com/spring-crm-rest-demo

code review
1. pom.xml file
2. All Java Config
3. Configuration file for database connection
4. Hibernate Entity class: Customer
5. DAO: CustomerDAO ...
6. Service: CustomerService ...

Get Customers
Dev Process
1. Create Customer REST Controller
2. Autowire CustomerService
3. Add mapping for GET /customers

Get Single Customer
3. Add mapping for GET /customers with path

Exception Handling
1. Create a custom error response class.
2. Create a custom exception class.
3. Update REST service to throw exception if customer not found.
4. Add an exception handler methods using @ExceptionHandler.

Add customer
Use @RequestBody to access the request body as a POJO

set(0)

saveOrUpdate(...)
if (primaryKey/id) empty then INSERT new customer
else UPDATE existing customer
Here "empty" means null or 0

Adding customer with HTTP POST
- If REST client is sending a request to "add", using HTTP POST
- Then we ignore any id sent in the request
- We overwrite the id with 0, to effectively set it to null/empty
- Then our backend DAO code will "INSERT" new customer

Sending JSON to Spring REST Controllers
- When sending JSOn data to Spring REST Controllers
- For controller to process JSON data, need to set a HTTP request header
	Content-type: application/json
- Need to configure REST client to send the correct HTTP request header

Process
Access the Request Body
Add Customer

-----
HTTP Status 405 ? Method Not Allowed
Type - Status Report
Message - Request method ‘POST’ not supported
Description - The method received in the request-line is known by the origin server but not supported by the target resource.

You can resolve this by disabling CSRF with this code snippet: http.csrf().disable();


public class SecurityConfig extends WebSecurityConfigurerAdapter {
  ...
  protected void configure(HttpSecurity http){...}
  ...
    http.csrf().disable();
  ...
}
-----

Update Customers
@PutMapping

Delete Customers
@DeleteMapping
-----
https://github.com/darbyluv2code/spring-boot-3-spring-6-hibernate-for-beginners