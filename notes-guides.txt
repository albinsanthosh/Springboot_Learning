MVC 

Controller (Logic)

Model(data)

View template(JSP, Groovy etc)

1. web.xml - dispatcher servlet (Front controller), servlet mapping, location for the spring config file.

2. spring config file.xml - component scanning, supporting functions, MVC view resolver(prefix, suffix for getting view files)

-----Adding static files-----

resources folder in WebContent
Step 1: Add the following entry to your Spring MVC configuration file: spring-mvc-demo-servlet.xml

You can place this entry anywhere in your Spring MVC config file.

<mvc:resources mapping="/resources/**" location="/resources/"></mvc:resources> 

Step 2: Now in your view pages, you can access the static files using this syntax:

<img src="${pageContext.request.contextPath}/resources/images/spring-logo.png"> 

You need to use the JSP expression ${pageContext.request.contextPath} to access the correct root directory for your web application.

Apply the same technique for reading CSS and JavaScript.

-----Generate & Deploy War file-----

1. In Eclipse, stop Tomcat

2. Right-click your project and select Export > WAR File

3. In the Destination field, enter: <any-directory>/mycoolapp.war

4. Outside of Eclipse, start Tomcat
- If you are using MS Windows, then you should find it on the Start menu

5. Make sure Tomcat is up and running by visiting: http://localhost:8080

6. Deploy your new WAR file by copying it to <tomcat-install-directory>\webapps

Give it about 10-15 seconds to make the deployment. You'll know the deployment is over because you'll see a new folder created in webapps ... with your WAR file name.

7. Visit your new app. If your war file was: mycoolapp.war then you can access it with:  http://localhost:8080/mycoolapp/


Spring MVC form tags
<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %>

jstl tags
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c" %>

-----validator-----
www.hibernate.org

validator -> releases -> 6.2 -> download zip archive

Extract go to dist folder
Copy all jars in dist outer folder.
ALso copy jars in the required folder inside dist/lib folder.
Copy all these to WEB-INF/lib 

-----validator-Empty-String-----
@InitBinder - Preprocess

StringTrimmerEditor(true) true means it with strim it to null

WebDataBinder object can register as customer editor the StringTrimmerEditor object for the String class.

-----Regular expression-----
https://docs.oracle.com/javase/tutorial/essential/regex


-----custom error properties file-----
We basically need to override the default Spring MVC validation messages.

errortype.springmodelattributename.fieldname=errormessage

The format of the error key is:   code + "." + object name + "." + field

To find out the given error code, in your Spring controller, you can log the details of the binding result

System.out.println("Binding result: " + theBindingResult); 

Also edit the spring config file to load custom message resources.

-----Custom Anotation spring mvc-----
annotation over it 
@Constraint
@Target - on methods/fields etc
@Retention - runtime etc

#------------
HIBERNATE
#------------

Download MySQL
http://dev.mysql.com/downloads
Select MySQL Community Server & Download MSI

Install
Developer default

To add Hibernate to Eclipse
1. Create Eclipse Project
2. Download Hibernate Files
download link:
http://www.luv2code.com/download-hibernate
3. Download MySQL JDBC Driver
download link:
http://dev.mysql.com/downloads 
and select connector/J 
and select Platform Independent
and download zip file
4. Add JAR files to Eclipse Project ... Build Path 

JDBC url
jdbc:mysql://localhost:3306/hb_student_tracker?useSSL=false&serverTimezone=UTC

Entity Class
Java class that is mapped to a database table.

Java annotation
1. Map class to database table.
1. Map fields to database columns. 

Session factory is once created and session short-lived.

If while creating session factory object, in .configure() no file name specified, by default it will be "hibernate.cfg.xml".

@Id annotation for primary key 

#the values will start from 3000 onwards
ALTER TABLE hb_student_tracker.student AUTO_INCREAMENT=3000;

#deletes all rows and resets sequence to one
truncate hb_student_tracker.student

###To show SQL queries values
(2 methods - manual and maven)

1. Download logback JAR files manually
- logback-core-1.2.7.jar
- logback-classic-1.2.7.jar
- slf4j-api-1.7.32.jar

1b. Copy these files to your project’s lib directory
1c. Right-click your Eclipse project and select Properties
1d. Select Build Path > Libraries > Add JARS…
1e. Select the JAR files from the lib directory

Option 2: Maven dependencies (only required if using Maven)
Add the following dependency to your Maven pom.xml file.
<dependency>
    <groupId>ch.qos.logback</groupId>
    <artifactId>logback-classic</artifactId>
    <version>1.2.7</version>
</dependency>

2. Create a Logback configuration file
Notes regarding file location:
- If you are using manual JAR files place this file at src/logback.xml
- If you are using Maven, place this file at src/main/resources/logback.xml
Please make note of the following entry:

    <logger name="com.luv2code.hibernate.demo" level="TRACE"/>
Be sure the package name matches the name of your package.
This Logback configuration file allows you to see a low-level trace of Hibernate and this allows you see the real SQL parameter values.

3. Run the CreateStudentDemo application
Now run your application. You will see a lot of low-level TRACE logs in the Eclipse Console window.


For updating an object property, we use setter method of that object and commit transaction.  

#Adding Date
1. Alter database table for student
We need to alter the database table to add a new column for "date_of_birth".
Run the following SQL in your MySQL Workbench tool.
ALTER TABLE `hb_student_tracker`.`student` 
ADD COLUMN `date_of_birth` DATETIME NULL AFTER `last_name`;

2. Add a date utils class for parsing and formatting dates
We need to add a DateUtils class to handle parsing and formatting dates. The source code is here. The class should be placed in the package: com.luv2code.hibernate.demo.

3. Add date field to Student class
We need to add a date field to the Student class. We map this field to the database column, "date_of_birth". Also, we make use of the @Temporal annotation. This is a Java annotation for storing dates.
    @Column(name="date_of_birth")
    @Temporal(TemporalType.DATE)    
    private Date dateOfBirth;

4. Add toString method to Student class
We will make an update to the toString method in our Student class.  It will use the formatter from our DateUtils.class. This code is already included in Student.java from the previous step.

5. Update CreateStudentDemo

Primary key - unique id
Foreign key - a column which is primary key in another table
Cascade delete - if an employee is deleted from a table then their employee details will be deleted from another table also.
Eager loading - fetches everything 
Lazy loading - fetches only required

@OneToOne
Cascade Type - PERSIST, REMOVE, REFRESH, DETACH, MERGE, ALL

For bidirectional
@OneToOne(mappedBy="instructorDetail", cascade=CascadeType.ALL)

Prefer Lazy Loading over Eager Loading.

Default Fetch Types
@OneToOne - FetchType.EAGER
@OneToMany - FetchType.LAZY
@ManyToOne - FetchType.EAGER
@ManyToMany - FetchType.LAZY