git 
https://github.com/darbyluv2code/spring-boot-3-spring-6-hibernate-for-beginners.git

create a controller and add a getMapping for /

Spring framework

Core container (Beans, Core, SpEL, Context)
Factory for creating beans, manage bean dependencies.
Coontext holds beans in memory.
Spel - spring expression language.

Infrasture (AOP, Aspects, Instrumentation, Messaging)

Data Access Layer (JDBC, ORM, Transaction, OXM, JMS)

Web Layer (Servlet, WebSocket, Web)

Test Layer (Unit, Integration, Mock)
-----
Only use what you need
Spring Cloud, Data
Spring Batch, Security
Spring Web Services, Spring LDAP
and others

www.spring.io
-----
Maven
project Management tool
Build Management and dependencies

how it works?
Read config file
Check local repo
Get from remote repo
Save in local repo
Build and run
-----
Maven standard directory structure
Directory Description
src/main/java java - code
src/main/resources - properties/config files used by your app
src/test/java - unit testing source code

Maven Wrapper files
mvnw allows you to run a Maven project
	No need to have Maven installed or present on your path
	If correct version of Maven is NOT found on your computer.
		Automatically downloads correct version and runs Maven
2 files are provided 
	mvnw.cmd for MS Windows // > mvnw clean compile test
	mvnw.sh for Linux/Mac // $ ./mvnw clean compile test

If maven already installed we can ignore or delete mvnw files 
$ mvn clean compile test

pom.xml - includes info enter in spring intializer website
Springboot starters - A collections of Maven dependencies(Compactible versions)
e.x. spring-boot-starter-web

Spring boot maven POM file
spring-boot-maven-plugin - To package executable jar or war file
$ ./mvnw package
$ ./mvnw spring-boot:run

Application properties src/main/resources 
By default, Springboot will load properties from: application.properties.
Created by Spring Initializr, empty at the beginning

Can add Springboot properties
server.port=8585 
Also can addd your own custom properties
coach.name=Mickey Mouse

Access it
@Value("${coach.name}")
private String coachName

Static content
By default, Springboot will load static resources from:"/static" directory
e.x. HTML files, CSS, JavaScript, images, etc ...

Warning
Do not use src/main/webapp directory if your application is packaged as a jar.
Although this is a standard Maven directory, it works only with WAR packaging.
It is silently ignored by most build tools if you generate a JAR.

Templates
SpringBoot includes auto-configuration for following template engines
FreeMarker, Thymeleaf, Mustache
By default, Springboot will load templates from "/template" directory

Unit test
------
Spring boot starters
web, security, data-jpa
www.luv2code.com/spring-boot-starters

eclipse - pom.xml/dependency heirarchy
intellij - View > Tool Windows> Maven Projects > Dependencies

Spring Bott Starter Parent
- This is a special starter that provides Maven defaults
<parent>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-parent</artifactId>
	<version>3.0.5</version>
	<relativePath/> <!-- lookup parent from repository -->
</parent>

To override a default , set as a property
<properties>
	<java.version>17</java.version>
</properties>

- For spring-boot-starter-* dependencies, no need to list version
inherits from starter parent.

- Default configuration of Spring Boot plugin
>mvn spring-boot:run
-----
*****Spring Boot Dev Tools*****
Automatically restarts your application when code is updated.
Add the dependency
groupId-org.springframework.boot
artifactId-spring-boot-devtools

Intellij doesn't support by default
*****To support*****
- Select Preferences > Build, Execution, Deployment > Compiler
Check box Build project automatically

- Additional setting
Select Preferences > Advanced Settings
Check box: Allow auto-make-to ... 

Dev Process
1. Apply Intellij configurations
2. Edit pom.xml and spring-boot-devtools
3. Add new REST endpoint to our app
4. Verify the appp is automatically
-----
Spring Boot Actuators
How can i monitor, manage my application, check application health, application metrics?

It exposes endpoints to monitor and manage your application. 
(DevOps functionality)
Simply add dependency to POM file
REST endpoints are automatically added to application.

Dependency
groupId - org.springframework.boot
artifactId - spring-boot-starter-actuator

Endpoints are prefixed with /actuator
/health - Heath information about your application
status of your application 
Normally used by monitoring apps to see if your application is up or down.

/info is not exposed by default
can provide information about your application
To expose

src/main/resources/application.properties
management.endpoints.web.exposure.include=health,info
management.info.env.enabled=true

By default it gives empty, need to specify in application.properties
info.app.name=My Super Cool App
info.app.description=A crazy and fun app, yahoo!
info.app.version=1.0.0

other e.x.
/auditevents, /beans, /mappings, /threaddump
www.luv2code.com/actuator-endpoints

To expose all actuator endpoints over HTTP
* is wildcard, individual can be added using comma delimited list
management.endpoints.web.exposure.include=*

Dev process
1. Edit pom.xml and add spring-boot-starter-actuatore
2. View actuaor endpoints for: /health
3. Edit application.properties to customize /info

www.luv2code.com/chrome-json-formatter
-----
Security
Add spring security
artifactId - spring-boot-starter-security

Now when we access /actuator/beans
Spring security will prompt for login
Default user name - user
password is to checked in console log

We can override the name and generated password
src/main/resources/application.properties
spring.security.user.name=scott
spring.security.user.password=tiger

Exclude endpoints
in application.properties
management.endpoints.web.exposure.exclude=health, info

Dev process
1. Edit pom.xml and add spring-boot-starter-security
2. Verify security on actuator endpoints for: /beans etc
3. Disable endpoints for /health and /info
-----
Two options for running the app
Option 1: Use java -jar
Option 2: Use Spring Boot Maven plugin
mvnw spring-boot:run

To package executable jar or war archive
Can easily run the app

./mvnw package
./mvnw spring-boot:run

Dev Process
1. Exit the IDE
2. Package the app using mvnw package
jar file created in target subdirectory
windows - mvnw package
3. Run app using java -jar
4. Run app using Spring Boot Maven plugin, ./mvnw spring-boot:run
-----
Injecting Custom Application Properties file
By default, Spring Boot reads information from standard properties file located at
src/main/resources/application.properties
We can define ANY custom properties in this file.
Spring Boot app can access properties using @Value.

Dev Process
1. Define custom properties in application.prperties
2. Inject properties into Spring Boot application using @Value
-----
Spring Boot Properties
Configured in application.properties
Server port, context path, actuator, security etc

List of common properies
www.luv2code.com/spring-boot-props

- Core Properties
logging levels severity mapping
logging.level.org.springframework=DEBUG
logging.level.org.hibernate=TRACE
logging.level.com.luv2code=INFO

Logging levels
TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF

Log file name
logging.file=my-crazy-stuff.log

Spring Boot Logging 
www.luv2code.com/spring-boot-logging

- Web properties
HTTP server port
server.port=7070

Context path of the application
server.servlet.context-path=/my-silly-app
e.x. http://localhost:7070/my-silly-app/fortune

Default HTTP session session time out
server.servlet.session.timeout=15m
Default timeout is 30 min

- Actuator Properties
incluse, exclude

Base path for actuator endpoints
management.endpoints.web.base-path=/actuator
e.x. http://localhost:7070/actuator/health

- Security Properties
user.name, user.password

- Data Properties
JDBC URL of the database
spring.datasource.url=jdbc:mysql://localhost:3306/ecommerce

Login username of the database
spring.datasource.username=scott

Login password of the database
spring.datasource.password=tiger

Dev Process
1. Configure the server port
2. Configure the application context path

-----
Spring Injection Types

Recommended by Spring.io dev team
Constructor Injection: required dependencies
Setter Injection: optional dependencies

Not Recommended by Spring.io dev team
Field Injection
As it makes it harder to unit test

Field injection
@Autowired
private Coach myCoach

Qualifiers 
use @Qualifiers("cricketCoach")
Specify the bean id. Same name as class, first character lower-case
can be used in constructor or setter methods

 
@Primary for primary implementation to use
@Qualifiers has higher priority than @Primary 

More specific and higher priority than primary
-----
Lazy Initialization
By default, when your application starts, all beans are initialized. Spring will create an instance of each and make them available.
In lazy initialization, a bean will only be initialized in following cases:
It is needed for dependency injection or it is explicitly requested.

Add the @Lazy annotation to a given class

Global configuration
in application.properties 
spring.main.lazy-initialization=true
-----
Bean scopes
Singleton
Spring Container creates only one instance of bean by default
Cached in memory
All dependency injections for the bean will reference the same bean

Explicitly specify bean scope
@Scope(ConfigurableBeanFactory.SCOPE_SINGLETON)

Additional spring bean scopes
singleton - Creates a single shared instance of the bean. Default scope.
prototype - Creates a new bean instance for each container request.
request - Scoped to an HTTP web request. Only used for web apps.
session - Scoped to an HTTP web session. Only used for web apps.
global-session - Scoped to a global HTTP web session. Only used for web apps.

Prototype
new object instance for each injection
@Scope(ConfigurableBeanFactory.SCOPE_PROTOTYPE)
----
Bean Lifecycle
Container Started -> Bean Instantiated -> Dependencies Injected -> Internal Spring Processing -> Your Custom Init Method -> Bean Is Ready For Use/ Container Is Shutdown -> Your Custom Destroy Method -> STOP

For calling custom business logic methods
Clean up handles to resources(db, sockets, files etc)

@PostConstruct
@PreDestroy

Dev Process
1. Define your methods for init and destroy
2. Add annotations: @PostConstruct and @PreDestroy

For protoype scoped beans, Spring does not call the destroy methods.

Prototype beans are lazy by default. No need to use @Lazy annotation for prototype scopes beans.
-----
Java Config Bean 

Dev Process
1. Create @Configuration class
2. Define @Bean method to configure the bean
The bean id defaults to the method name
3. Inject the bean into our controller

Usecase for @Bean
Make an existing third-party class available to Spring framework
You may not have access to the source code of the third-party class. However, you would like to use the third-party class as a Spring bean

e.g. AWS S3 client code is part of AWS SDK source code.
We can configure it as a Spring bean using @Bean, inject the S3Client as a bean and store our document in S3.

custom bean id in paranthesis @Bean("aquatic")
------
Spring boot hibernate/jpa

Dependencies for spring boot hibernate/jpa
MySQL Driver
Spring Data JPA 

CommandLineRunner gets executed after the spring beans are loaded

1. Add database configuration in Application Config
2. Create a bean for CommandLineRunner 

Reduce chatter in Application Config
1. turn off spring boot banner 
2. Reduce logging level set to warn (will only show warning and errors)
-----
JPA dev Process
1. Annotate Java Class.
2. Develop Java Code to perform database operations

If we declare constructor with parameters, we need to declare no arg contructor.

Java Annotation
1. Map class to database table 
2. Map class to database columns

@Id
@GeneratedValue(strategy=GeneratinType.IDENTITY)
@Column(name="id")

@GeneratedValue means valkue is generated by database itself.

Generating custom generation strategy
Create implementation of org.hiberanate.id.IdentifierGenerator
Override the method: public Serializable generate(...)

-----
Student DAO
1. Define DAO interface
2. Define DAO implementation
- Inject the entity manager
3. Update main app

@Repository also translates JDBC exceptions

To start auto increment from 3000 onwards
ALTER table student_tracker.student AUTO_INCREMENT=3000;

How to reset to 1
TRUNCATE student_tracker.student;

entityManager.find(Student.class, 1);
Entity class, primary key
If not found returns null

Dev Process
1. Add a new method to DAO interface
2. Add new method to DAO implementation
3. Update main app
-----
JPA Query Language (JPQL) for retrieving  objects. 
But based on entity name and entity fields.

Named Parameter - :theDaTa
theQuery.setParameter("theData", theLastName);

Development Process
1. Add new method to DAO interface
2. Add new method to DAO implementation
3. Upadate main app

by default oder by lastName is ascending

To save the student
entityManager.persist(theStudent); 

To update on database
entityManager.merge(theStudent)

Update last name for all students
int numRowsDeleted = entityManager.createQuery(
"UPDATE Student SET lastName='Tester'").executeUpdate();
Returns number of rows deleted

To delete on database
entityManager.remove(theStudent)

Delete based on a condition
int numRowsDeleted = entityManager.createQuery(
"DELETE FROM Student WHERE lastName='Smith'").executeUpdate();
Returns number of rows deleted
-----
Create database tables from Java code
In spring boot config file application.properties
spring.jpa.hibernate.ddl-auto=create
When run, JPA/Hibernate wil drop tables then create them

spring.jpa.hibernate.ddl-auto=PROPERTY-VALUE
property value || property description
none - No action will be performed
create-only - Database tables are only created
drop - Databae tables are dropped
create - Database tables are dropped followed by database tables creation
create-drop - Database tables are dropped followed by database tables creation. On application shutdown, drop the database tables.
validate - Validate the database tables schema
update - Update the database tables schema

Add logging configs to log SQL statements
logging.level.org.hibernate.SQL=debug
logging.level.org.hibernate.orm.jdbc.bind=trace

-----
@ControllerAdive for global exception handling, preprocess requests to controller, postprocess responses to handle exception.

-----
Spring Boot Rest Project
Development process
1. Set up Database Dev Environment
2. Create Spring Boot project using Spring Initializr
3. Get list of employees
4. Get single employee by ID
5. Add a new employee
6. Update an existing employee
7. Delete an existing employee

Rest DAO dev process (Enable intellij setting for spring boot dev tools)
1. Update db configs in application.properties
2. Create Employee entity
3. Create DAO interface
4. Create DAO implementation
5. Create REST controller to use DAO

Service layer - provide controller with a single view of the data that we integrated from multiple backend datasources.
@Service

A service class (interface) and its implementation
------
Update 
entityManager.merge(theEmployee)
if id ==0 then save/insert else update
-----
Spring Data JPA
Create a DAO for me
Plug in my entity type and primary key
Give me all the basic CRUD features for free

Spring Data JPA provides the interface JpaRepository, exposes methods(some by inheritance from parents)

Dev Process
1. Extend JpaRepository interface
2. Use your Repository in your app

Advanced features available for
- Extending and adding custom queries with JPQL
- Query Domain Specific Language (Query DSL)
- Defining custom methods(low-level coding)

We can remove @Transactional as Jpa repository uses by default
1. Create Spring Data JPA Repository
2. use in serviceImpl

Java Optional - new feature
-----
Spring Data REST
Create a REST API for me
use my existing JpaRepository(entity, primary key)
Give me all the basic REST API CRUD features for free

Simple pluralized form of entity type
first character of entity type is lowercase
then just adds an "s" to the entity

Dev process
1. Add Spring Data REST to your Maven POM file
groupId - org.springframework.boot
arifactId - spring-boot-starter-data-rest

3 needs for Spring Data REST - entity, JpaRepository, Pom dependency

Architecture now
Spring Data REST <-> Spring Data JPA[Employee Repository] <-> DB
/employees

Spring Data REST endpoints are HATEOAS compliant
HATEOAS: Hypermedia as the Engine of Application State
Hypermedia-driven sites provide information to access REST interfaces
Think of it as meta-data for REST data

HATEOAS uses Hypertext Application Language (HAL) data format

link became http://localhost:8080/employees

To customize our base path, need to add in application.properties
spring.data.rest.base-path=/magic-api

For delete no response body but response code is 204 success

But it doesn't handle complex pluralized form

Specify plural name/ path with an annotation
@repositoryRestResource(path="members")

Pagination
By default page size is 20 elements
For further we can use query param
http://localhost:8080/employees?page=0

other properties
spring.data.rest.default-page-size default size of pages
spring.data.rest.max-page-size maximum size of pages

e.x.
spring.data.rest.default-page-size=50

Sorting
sort by last name acsending is default
http://localhost:8080/employees?sort=lastName

sort by first name, descending
http://localhost:8080/employees?sort=firstName,desc

sort by last name, then first name, ascending
http://localhost:8080/employees?sort=lastName,firstName,asc
-----
Spring Security

Basic configuration
1. Create Spring security Security Configuration
2. Add users, passwords and roles

noop - no operation
bcrypt

When we define InMemoryUserDetailsManager, it will check user from here not in application.properties.

Restricting access to roles
requestMatchers(<< add path to match on >>)
	.hasRole(<< authorized role >>)

requestMatchers(<< add HTTP METHOD to match on >>, << add path to match on >>)
	.hasRole(<< authorized role >>)

requestMatchers(<< add HTTP METHOD to match on >>, << add path to match on >>)
	.hasAnyRole(<< list of authorized roles >>)

e.x.
requestMatchers(HttpMethod.DELETE, "/api/employees/**").hasRole("ADMIN")

http.httpBasic; use HTTP Basic authentication

CSRF
http.csrf().disable() // disable Cross site request forgery (CSRF)
-----
JDBC Authentication
Dev Process
1. Develop SQL Script to set up database tables.
2. Add database support to Maven POM file.
3. Create JDBC properties file.
4. Update Spring Security Configuration to use JDBC.

Need to have tables
users
username - VARCHAR(50)
password - VARCHAR(50)
enabled - TINYINT(1)

authorities
username - VARCHAR(50)
authority - VARCHAR(50)

Bcrypt encryption
www.luv2code.com/generate-bcrypt-password

Dev process
1. Run SQL Script that contains encrypted passwords
Modify DDL for password field, length should be 68


Custom Tables authentication
1. Create our custom tables with SQL
2. Update Spring Security Configuration
	- Provide query to find user by user name
	- Provide query to find authorities/ roles by user name

For DEBUG error logging
logging.level.org.springframework.security=DEBUG

https://www.luv2code.com/bonus-lecture-spring-boot-rest-security-jpa-hibernate-bcrypt-code
-----
Thymeleaf - Java templating engine
Used to generate the HTML views for webapps

Thymleaf template - can be an HTML page wth some thymeleaf expressions.
Include dynamic content from Thymeleaf expressions.

Dev Process
1. Add Thymeleaf to Maven POM file
2. Develop Spring MVC Controller
3. Create Thymeleaf template

In Springboot, your Thymeleaf template go in
src/main/resources/templates

For webapps, Thymeleaf template have a .html extension

Additional features
-Looping and conditionals
-CSS and JavaScript integration
-Template layouts and fragments

Using CSS with Thymeleaf templates
-Local CSS files as part of your project
-Referencing remote CSS files

Dev Process
1. Create CSS file
2. Reference CSS in Thymeleaf template
3. Apply CSS style

Springboot will look for static resources in the directory
src/main/resources/static

Springboot will search following directories for static resources
1. /META-INF/resources
2. /resources
3. /static
4. /public
search order: top-down

3rd party css libraries addition
Download bootstrap file and add to /static/css directory
Remote files using CDN using href

Springboot Thymeleaf CRUD database project
Dev process
1. Get list of employees
2. Add a new employee
3. Update an existing employee
4. Delete an existing employee
-----
index.html in resources/static loads automatically in localhost:8080 if no page/path is specified

index.html Redirects to employees/list
<meta http-equiv = "refresh"
      content = "2; url ='employees/list'" />

Add Employee Dev process
1. New Add Employee button for list-employees.html
2. Create HTML form for new employee
3. Process form data to save employee

Thymeleaf Expressions
To build HTML form
Expression - Description
th:action - Location to send form data
th:object - Reference to model attribute
th:field - Bind input field to a property on model attribute

*{firstName} Selects property on referenced th:object

@symbol Reference context path of your application (app root)

Send form data to /employees/save
<form action="#" th:action="@{/employees/save}"
                         th:object="${employee}" method="POST">

action"#" tells that thymeleaf will handle further
employee obejct defined in conroller

Spring Data JPA magic
findAllByOrderByLastNameAsc - from Employee order by lastName asc

Update Employee
1. "Update" button
2. Pre-populate the form
3. Process form data

Delete Employee
1. Add "Delete" button/link on page
2. Add controller code for "Delete"

In controller method, use a redirect to prevent duplicate submissions
return "redirect:/employees/list";

-----
Spring Security

Implemented using servlet filters in background
2 methods of securing an app: declarative and programmatic

Authentication
Check user id and password with credentials stored in app/db

Authorization
Check to see if user has an authorized role

Enabling Spring Security
1. Edit pom.xml and add spring-boot-starter-security
2. This will automagically secure all endpoints for application

Different Login Methods
HTTP Basic Authentication
Default login form
Custom login form

Dev Process
1. Create project at Spring Initializr website
	a. Add Maven dependencies for Spring MVC Web App, Security, Thymeleaf
2. Develop our Spring Controller
3. Develop our Thymeleaf view page

Basic Configuration
1. Create Spring Security Configuration(@Configuration)
2. Add users, passwords and roles

Custom Login Form
1. Modify Spring Security Configuration to reference custom login form
2. Develop a Controller to show the custom login form
3. Create custom login form
	HTML (CSS optional)

.loginPage("/showMyLoginPage")
.loginProcessingUrl("/authenticateTheUser") Login form should post data to this url for processing

Note
Need to create a controller for this request handling "showMyLoginPage"
No Controller Request Mapping required for this "authenticateTheUser", we get this for free

/authenticateTheUser -> handled by Spring Security Filters

custom form
Send data to login processing URL: /authenticateTheUser 
Must POST the data
default names for login fields
User name field: username
Password field: password
Spring Security filters will read the form data and authenticate the user

Context Root / Context Path
root path of your web application
context root: my-ecommerce-app
http://localhost:8080/my-ecommerce-app

@ - gives us access to context path dynamically 

This approach is best practice using context path dynamically than hardcoding it

<html lang="en" xmlns:th="http://www.thymeleaf.org">
XML 
Namespace doesn't connect to Internet. 
Just a unique identifier that is configured in the Thymeleaf JAR file

-----
Error failed Login
	Send user back to your login page
	Append an error parameter

Dev process
1. Modify custom login form
	a. Check the error parameter
	b. If error parameter exists, show an error message

Custom login form with bootstrap
1. Modify form to point to our login processing URL
2. Verify form fields for username and password
3. Change our controller to use our new Boootstrap login form
-----
Logout

Dev Process
1. Add logout support to Spring Security Configuration
2. Add logout button to homepage
3. Update login form to display "logged out" message

Addd logout support for default URL /logout
.logout(logout -> logout.permitAll())

Send data to defauklt logout URL /logout
By default, must use POST method

When logout is processed, by default Spring Security will...
Invalidate user's HTTP session and remove session cookies, etc
Send user back to your login page
Append a logout parameter: ?logout

If logout then show mesage on login form
-----
Display UserId and Roles

Dev Process
1. Display User Id
2. Display User Roles

sec:authentication="principal.username"
sec:authentication="principal.authorities"
-----
Restrict access based on roles

Dev process
1. Create supporting controller code and view pages 
2. Restrict Access based on Roles

requestMatchers(<< add path to match on >>).hasRole(<< authorized role >>)

3. Restrict Access based on Roles
requestMatchers(<< add path to match on >>).hasAnyRole(<< list of authorized roles >>)

/leaders/**
** means subdirectories here
----
Custom Access Denied page

Dev Process
1. Configure custom page for access denied
2. Create supporting contoller code and view page

.exceptionHandling(configurer -> 
configurer
	.accessDeniedPage("/access-denied"))

-----
Display content based on roles

Modify home.html - Add security tags
----
Database access

Dev Process
1. Develop SQL Script to set up database tables
2. Add database support to Maven POM file
3. Create JDBC properties file
4. Update Spring Security Configuration to use JDBC

Default
users
username VARCHAR(50) primary
password VARCHAR(50)
enables TINYINT(1)

authorities
username VARCHAR(50) foreign
authority VARCHAR(50)

Added in pom
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		<dependency>
			<groupId>com.mysql</groupId>
			<artifactId>mysql-connector-j</artifactId>
			<scope>runtime</scope>
		</dependency>

-----
Bcript encryption

Dev Process

1. Run SQL Script that contains encrypted passwords
	a. Modify DDL for password field, length should be 68

Login Process
1. Retrieve password from db for the user
2. Read the encoding algorithm id (bcrypt etc)
3. For case of brypt, encrypt plaintext password from login form (using salt from db password)
4. Compare encrypted password from login form WITH encrypted password from db
5. If there is a match, login successful
6. If no match, login NOT successful  
-----
Custom Tables

1. Create our custom tables with SQL
2. Update Spring Security Configuration
	a) Provide query to find user name
	b) Provide query to find authorities / roles by user name
