create a controller and add a getMapping for /

Spring framework

Core container (Beans, Core, SpEL, Context)
Factory for creating beans, manage bean dependencies.
Coontext holds beans in memory.
Spel - spring expression language.

Infrasture (AOP, Aspects, Instrumentation, Messaging)

Data Access Layer (JDBC, ORM, Transaction, OXM, JMS)

Web Layer (Servlet, WebSocket, Web)

Test Layer (Unit, Integration, Mock)
-----
Only use what you need
Spring Cloud, Data
Spring Batch, Security
Spring Web Services, Spring LDAP
and others

www.spring.io
-----
Maven
project Management tool
Build Management and dependencies

how it works?
Read config file
Check local repo
Get from remote repo
Save in local repo
Build and run
-----
Maven standard directory structure
Directory Description
src/main/java java - code
src/main/resources - properties/config files used by your app
src/test/java - unit testing source code

Maven Wrapper files
mvnw allows you to run a Maven project
	No need to have Maven installed or present on your path
	If correct version of Maven is NOT found on your computer.
		Automatically downloads correct version and runs Maven
2 files are provided 
	mvnw.cmd for MS Windows // > mvnw clean compile test
	mvnw.sh for Linux/Mac // $ ./mvnw clean compile test

If maven already installed we can ignore or delete mvnw files 
$ mvn clean compile test

pom.xml - includes info enter in spring intializer website
Springboot starters - A collections of Maven dependencies(Compactible versions)
e.x. spring-boot-starter-web

Spring boot maven POM file
spring-boot-maven-plugin - To package executable jar or war file
$ ./mvnw package
$ ./mvnw spring-boot:run

Application properties src/main/resources 
By default, Springboot will load properties from: application.properties.
Created by Spring Initializr, empty at the beginning

Can add Springboot properties
server.port=8585 
Also can addd your own custom properties
coach.name=Mickey Mouse

Access it
@Value("${coach.name}")
private String coachName

Static content
By default, Springboot will load static resources from:"/static" directory
e.x. HTML files, CSS, JavaScript, images, etc ...

Warning
Do not use src/main/webapp directory if your application is packaged as a jar.
Although this is a standard Maven directory, it works only with WAR packaging.
It is silently ignored by most build tools if you generate a JAR.

Templates
SpringBoot includes auto-configuration for following template engines
FreeMarker, Thymeleaf, Mustache
By default, Springboot will load templates from "/template" directory

Unit test
------
Spring boot starters
web, security, data-jpa
www.luv2code.com/spring-boot-starters

eclipse - pom.xml/dependency heirarchy
intellij - View > Tool Windows> Maven Projects > Dependencies

Spring Bott Starter Parent
- This is a special starter that provides Maven defaults
<parent>
	<groupId>org.springframework.boot</groupId>
	<artifactId>spring-boot-starter-parent</artifactId>
	<version>3.0.5</version>
	<relativePath/> <!-- lookup parent from repository -->
</parent>

To override a default , set as a property
<properties>
	<java.version>17</java.version>
</properties>

- For spring-boot-starter-* dependencies, no need to list version
inherits from starter parent.

- Default configuration of Spring Boot plugin
>mvn spring-boot:run
-----
Spring Boot Dev Tools
Automatically restarts your application when code is updated.
Add the dependency
groupId-org.springframework.boot
artifactId-spring-boot-devtools

Intellij doesn;t support by default
To support
- Select Preferences > Build, Execution, Deployment > Compiler
Check box Build project automatically

- Additional setting
Select Preferences > Advanced Settings
Check box: Allow auto-make-to ... 

Dev Process
1. Apply Intellij configurations
2. Edit pom.xml and spring-boot-devtools
3. Add new REST endpoint to our app
4. Verify the appp is automatically
-----
Spring Boot Actuators
How can i monitor, manage my application, check application health, application metrics?

It exposes endpoints to monitor and manage your application. 
(DevOps functionality)
Simply add dependency to POM file
REST endpoints are automatically added to application.

Dependency
groupId - org.springframework.boot
artifactId - spring-boot-starter-actuator

Endpoints are prefixed with /actuator
/health - Heath information about your application
status of your application 
Normally used by monitoring apps to see if your application is up or down.

/info is not exposed by default
can provide information about your application
To expose

src/main/resources/application.properties
management.endpoints.web.exposure.include=health,info
management.info.env.enabled=true

By default it gives empty, need to specify in application.properties
info.app.name=My Super Cool App
info.app.description=A crazy and fun app, yahoo!
info.app.version=1.0.0

other e.x.
/auditevents, /beans, /mappings, /threaddump
www.luv2code.com/actuator-endpoints

To expose all actuator endpoints over HTTP
* is wildcard, individual can be added using comma delimited list
management.endpoints.web.exposure.include=*

Dev process
1. Edit pom.xml and add spring-boot-starter-actuatore
2. View actuaor endpoints for: /health
3. Edit application.properties to customize /info

www.luv2code.com/chrome-json-formatter
-----
Security
Add spring security
artifactId - spring-boot-starter-security

Now when we access /actuator/beans
Spring security will prompt for login
Default user name - user
password is to checked in console log

We can override the name and generated password
src/main/resources/application.properties
spring.security.user.name=scott
spring.security.user.password=tiger

Exclude endpoints
in application.properties
management.endpoints.web.exposure.exclude=health, info

Dev process
1. Edit pom.xml and add spring-boot-starter-security
2. Verify security on actuator endpoints for: /beans etc
3. Disable endpoints for /health and /info
-----
Two options for running the app
Option 1: Use java -jar
Option 2: Use Spring Boot Maven plugin
mvnw spring-boot:run

To package executable jar or war archive
Can easily run the app

./mvnw package
./mvnw spring-boot:run

Dev Process
1. Exit the IDE
2. Package the app using mvnw package
jar file created in target subdirectory
windows - mvnw package
3. Run app using java -jar
4. Run app using Spring Boot Maven plugin, ./mvnw spring-boot:run
-----
Injecting Custom Application Properties file
By default, Spring Boot reads information from standard properties file located at
src/main/resources/application.properties
We can define ANY custom properties in this file.
Spring Boot app can access properties using @Value.

Dev Process
1. Define custom properties in application.prperties
2. Inject properties into Spring Boot application using @Value
-----
Spring Boot Properties
Configured in application.properties
Server port, context path, actuator, security etc

List of common properies
www.luv2code.com/spring-boot-props

- Core Properties
logging levels severity mapping
logging.level.org.springframework=DEBUG
logging.level.org.hibernate=TRACE
logging.level.com.luv2code=INFO

Logging levels
TRACE, DEBUG, INFO, WARN, ERROR, FATAL, OFF

Log file name
logging.file=my-crazy-stuff.log

Spring Boot Logging 
www.luv2code.com/spring-boot-logging

- Web properties
HTTP server port
server.port=7070

Context path of the application
server.servlet.context-path=/my-silly-app
e.x. http://localhost:7070/my-silly-app/fortune

Default HTTP session session time out
server.servlet.session.timeout=15m
Default timeout is 30 min

- Actuator Properties
incluse, exclude

Base path for actuator endpoints
management.endpoints.web.base-path=/actuator
e.x. http://localhost:7070/actuator/health

- Security Properties
user.name, user.password

- Data Properties
JDBC URL of the database
spring.datasource.url=jdbc:mysql://localhost:3306/ecommerce

Login username of the database
spring.datasource.username=scott

Login password of the database
spring.datasource.password=tiger

Dev Process
1. Configure the server port
2. Configure the application context path
